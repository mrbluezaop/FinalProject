window.showSaveModelPopup = function (predictId) {
    console.log("‚úÖ Opening Save Model Popup for predictId:", predictId);

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á Prediction
    $.ajax({
        url: `/api/predictC/${predictId}/`,  // üîπ ‡πÅ‡∏Å‡πâ URL ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô API ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• predict
        type: 'GET',
        dataType: 'json',
        success: function (predict) {
            console.log("‚úÖ Received Predict Data:", predict);

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
            if (!predict || typeof predict !== "object" ||
                !("Paint" in predict) || !("Chair" in predict) ||
                !("Lighting" in predict) || !("Nail" in predict) ||
                !("Table" in predict)) {
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Missing required fields in prediction response.",
                    confirmButtonText: "OK"
                });
                console.error("‚ùå Incomplete prediction data:", predict);
                return;
            }

            // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏±‡πà‡∏á Current Data
            document.getElementById("currentPaint").innerText = `${predict.Paint} Cans`;
            document.getElementById("currentChair").innerText = `${predict.Chair} Chairs`;
            document.getElementById("currentLighting").innerText = `${predict.Lighting} Bulbs`;
            document.getElementById("currentNail").innerText = `${predict.Nail} Boxes`;
            document.getElementById("currentTable").innerText = `${predict.Table} Tables`;
            console.log(predict)

            // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏ù‡∏±‡πà‡∏á New Data
            document.querySelectorAll(".popup-column input").forEach(input => {
                input.value = "";
            });

            // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Popup
            modal.style.display = "flex";
        },
        error: function (xhr, status, error) {
            console.error("‚ùå Error fetching predict data:", error);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
                confirmButtonText: "OK"
            });
        }
    });
};

saveBtn.addEventListener("click", function () {
    console.log("üíæ Saving new model data...");

    const predictId = saveBtn.getAttribute("data-id"); // ‡∏î‡∏∂‡∏á predictId ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏° Save
    if (!predictId) {
        console.error("‚ùå Missing predictId!");
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Predict ID is missing. Cannot proceed.",
            confirmButtonText: "OK"
        });
        return;
    }

    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Prediction
    $.ajax({
        url: `/api/predictC/${predictId}/`,
        type: 'GET',
        dataType: 'json',
        success: function (predict) {
            console.log("‚úÖ Received Predict Data:", predict);

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
            if (!predict || typeof predict !== "object" ||
                !("Paint" in predict) || !("Chair" in predict) ||
                !("Lighting" in predict) || !("Nail" in predict) ||
                !("Table" in predict)) {
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Missing required fields in prediction response.",
                    confirmButtonText: "OK"
                });
                console.error("‚ùå Incomplete prediction data:", predict);
                return;
            }

            // ‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            const newData = {
                "Predict_ID": predict.Predict_ID,
                "Width": predict.Width,
                "Length": predict.Length,
                "Height": predict.Height,
                "Job_type": predict.Type,
                "Budget": predict.Budget,
                "Wood_P": predict.Wood,
                "Paint_P": predict.Paint,
                "Lighting_P": predict.Lighting,
                "Nail_P": predict.Nail,
                "Table_P": predict.Table,
                "Chair_P": predict.Chair,
                "DateOfHire": predict.HireC_ID.Dateofhire,
                "Type": predict.HireC_ID.Type,
                "Location": predict.HireC_ID.Location,

                // ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
                "Wood": document.getElementById("newWood").value || "0",
                "Paint": document.getElementById("newPaint").value || "0",
                "Chair": document.getElementById("newChair").value || "0",
                "Lighting": document.getElementById("newLighting").value || "0",
                "Nail": document.getElementById("newNail").value || "0",
                "Table": document.getElementById("newTable").value || "0"
            };

            console.log("üì§ Sending data to submit_success/:", newData);

            // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á `/submit_success/`
            $.ajax({
                url: '/submit_success/',
                type: 'POST',
                data: JSON.stringify(newData),
                contentType: 'application/json',
                headers: { "X-CSRFToken": getCookie("csrftoken") },
                success: function (response) {
                    console.log("‚úÖ Data successfully saved:", response);
                    Swal.fire({
                        icon: "success",
                        title: "Saved Successfully!",
                        text: "New model data has been saved.",
                        confirmButtonText: "OK"
                    });

                    modal.style.display = "none"; // ‡∏õ‡∏¥‡∏î Popup ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Save
                },
                error: function (xhr, status, error) {
                    console.error("‚ùå Error saving data:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Save Failed!",
                        text: "An error occurred while saving. Please try again.",
                        confirmButtonText: "OK"
                    });
                }
            });
        },
        error: function (xhr, status, error) {
            console.error("‚ùå Error fetching prediction data:", error);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "Failed to retrieve prediction data. Please try again.",
                confirmButtonText: "OK"
            });
        }
    });
});

document.addEventListener("DOMContentLoaded", function () {
    console.log("‚úÖ JavaScript Loaded!");

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ class "save-btn"
    document.querySelectorAll(".save-btn").forEach((saveBtn) => {
        saveBtn.addEventListener("click", function () {
            console.log("üíæ Saving new model data...");

            // ‚úÖ ‡∏î‡∏∂‡∏á predictId ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏î
            const predictId = saveBtn.getAttribute("data-id");
            if (!predictId || predictId === "N/A") {
                console.error("‚ùå Missing predictId!");
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Predict ID is missing. Cannot proceed.",
                    confirmButtonText: "OK"
                });
                return;
            }
            console.log("‚úÖ Predict ID:", predictId);

            // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Prediction
            $.ajax({
                url: `/api/predictC/${predictId}/`,
                type: 'GET',
                dataType: 'json',
                success: function (predict) {
                    console.log("‚úÖ Received Predict Data:", predict);

                    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    if (!predict || typeof predict !== "object" ||
                        !("Paint" in predict) || !("Chair" in predict) ||
                        !("Lighting" in predict) || !("Nail" in predict) ||
                        !("Table" in predict)) {
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Missing required fields in prediction response.",
                            confirmButtonText: "OK"
                        });
                        console.error("‚ùå Incomplete prediction data:", predict);
                        return;
                    }

                    // ‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    const newData = {
                        "Predict_ID": predict.Predict_ID,
                        "Width": predict.Width,
                        "Length": predict.Length,
                        "Height": predict.Height,
                        "Job_type": predict.Type,
                        "Budget": predict.Budget,
                        "Wood_P": predict.Wood,
                        "Paint_P": predict.Paint,
                        "Lighting_P": predict.Lighting,
                        "Nail_P": predict.Nail,
                        "Table_P": predict.Table,
                        "Chair_P": predict.Chair,
                        "DateOfHire": predict.HireC_ID.Dateofhire,
                        "Type": predict.HireC_ID.Type,
                        "Location": predict.HireC_ID.Location,

                        // ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
                        "Wood": document.getElementById("newWood")?.value || "0",
                        "Paint": document.getElementById("newPaint")?.value || "0",
                        "Chair": document.getElementById("newChair")?.value || "0",
                        "Lighting": document.getElementById("newLighting")?.value || "0",
                        "Nail": document.getElementById("newNail")?.value || "0",
                        "Table": document.getElementById("newTable")?.value || "0"
                    };

                    console.log("üì§ Sending data to /submit_success/:", newData);

                    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á `/submit_success/`
                    $.ajax({
                        url: '/submit_success/',
                        type: 'POST',
                        data: JSON.stringify(newData),
                        contentType: 'application/json',
                        headers: { "X-CSRFToken": getCookie("csrftoken") },
                        success: function (response) {
                            console.log("‚úÖ Data successfully saved:", response);
                            Swal.fire({
                                icon: "success",
                                title: "Saved Successfully!",
                                text: "New model data has been saved.",
                                confirmButtonText: "OK"
                            });

                            // ‚úÖ ‡∏õ‡∏¥‡∏î Popup ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Save
                            document.getElementById("saveModelPopup").style.display = "none";
                        },
                        error: function (xhr, status, error) {
                            console.error("‚ùå Error saving data:", error);
                            Swal.fire({
                                icon: "error",
                                title: "Save Failed!",
                                text: "An error occurred while saving. Please try again.",
                                confirmButtonText: "OK"
                            });
                        }
                    });
                },
                error: function (xhr, status, error) {
                    console.error("‚ùå Error fetching prediction data:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "Failed to retrieve prediction data. Please try again.",
                        confirmButtonText: "OK"
                    });
                }
            });
        });
    });
});
